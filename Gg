#!/bin/bash
set -e

# Variablen
EMAIL="test@example.com"
MAIN_USER="secureuser" # Der einzige Benutzer, der sudo-Rechte haben soll

# Funktion: Sicherstellen, dass das Skript als Root ausgeführt wird
if [ "$EUID" -ne 0 ]; then
    echo "Bitte führen Sie dieses Skript als Root aus."
    exit 1
fi

# Funktion: Nur ein Benutzer mit sudo-Rechten
function ensure_single_sudo_user() {
    echo "Stelle sicher, dass nur $MAIN_USER sudo-Rechte hat..."
    # Entferne alle anderen Benutzer aus der sudo-Gruppe
    for USER in $(getent group sudo | awk -F: '{print $4}' | tr ',' ' '); do
        if [ "$USER" != "$MAIN_USER" ]; then
            gpasswd -d "$USER" sudo
            echo "Benutzer $USER aus der sudo-Gruppe entfernt."
        fi
    done

    # Überprüfe, ob der Benutzer $MAIN_USER existiert
    if ! id -u "$MAIN_USER" &>/dev/null; then
        echo "Benutzer $MAIN_USER existiert nicht. Erstelle den Benutzer..."
        useradd -m -s /bin/bash "$MAIN_USER"
        echo "$MAIN_USER:$MAIN_USER" | chpasswd
        echo "Benutzer $MAIN_USER erstellt."
    fi

    # Füge den Benutzer $MAIN_USER zur sudo-Gruppe hinzu
    usermod -aG sudo "$MAIN_USER"
    echo "Benutzer $MAIN_USER hat jetzt sudo-Rechte."
}

# Funktion: Sudo absichern
function harden_sudo() {
    echo "Härten der sudo-Konfiguration..."
    cat <<EOL > /etc/sudoers.d/secure_sudo
Defaults use_pty
Defaults logfile="/var/log/sudo.log"
Defaults env_reset
Defaults timestamp_timeout=0
Defaults secure_path="/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"
EOL
    chmod 440 /etc/sudoers.d/secure_sudo
    echo "sudo wurde gehärtet und protokolliert alle Befehle."
}

# Funktion: System aktualisieren und Sicherheitswerkzeuge installieren
function update_system_and_install_tools() {
    echo "System wird aktualisiert und grundlegende Sicherheitswerkzeuge werden installiert..."
    apt update && apt full-upgrade -y
    apt install -y fail2ban logwatch postfix sudo apparmor apparmor-utils auditd aide chkrootkit rkhunter chrony unattended-upgrades openssh-server libpam-tmpdir libpam-cracklib
}

# Funktion: Postfix konfigurieren
function configure_postfix() {
    echo "Konfiguriere Postfix für lokale E-Mail-Zustellung..."
    debconf-set-selections <<< "postfix postfix/mailname string $(hostname)"
    debconf-set-selections <<< "postfix postfix/main_mailer_type string 'Internet Site'"
    sed -i "s/^#mydestination = .*/mydestination = $(hostname), localhost/" /etc/postfix/main.cf
    systemctl enable postfix
    systemctl restart postfix
    echo "Postfix wurde konfiguriert."
}

# Funktion: SSH absichern
function secure_ssh() {
    echo "Sichern von SSH..."
    sed -i 's/^#PermitRootLogin .*/PermitRootLogin no/' /etc/ssh/sshd_config
    sed -i 's/^#PasswordAuthentication .*/PasswordAuthentication yes/' /etc/ssh/sshd_config
    sed -i 's/^#UsePAM .*/UsePAM yes/' /etc/ssh/sshd_config
    echo "AllowUsers $MAIN_USER" >> /etc/ssh/sshd_config
    echo "SSH-Konfiguration abgeschlossen."
    systemctl restart sshd
}

# Funktion: Fail2Ban konfigurieren
function configure_fail2ban() {
    echo "Konfiguriere Fail2Ban..."
    cat <<EOL > /etc/fail2ban/jail.local
[DEFAULT]
bantime = 3600
findtime = 600
maxretry = 3
destemail = $EMAIL
sender = fail2ban@$(hostname)
mta = mail

[sshd]
enabled = true
port = ssh
logpath = %(sshd_log)s

[postfix]
enabled = true
port = smtp,submission,465
logpath = /var/log/mail.log
EOL
    systemctl enable --now fail2ban
    echo "Fail2Ban wurde konfiguriert."
}

# Funktion: Logwatch konfigurieren
function configure_logwatch() {
    echo "Konfiguriere Logwatch für wöchentliche Berichte..."
    LOGWATCH_CONF="/etc/cron.weekly/00logwatch"
    mkdir -p /etc/logwatch/conf
    cat <<EOL > "$LOGWATCH_CONF"
#!/bin/bash
/usr/sbin/logwatch --output mail --mailto $EMAIL --detail high
EOL
    chmod +x "$LOGWATCH_CONF"
    echo "Logwatch wurde für wöchentliche Berichte konfiguriert."
}

# Funktion: Chrony als NTP konfigurieren
function configure_chrony() {
    echo "Konfiguriere Chrony als NTP-Client..."
    cat <<EOL > /etc/chrony/chrony.conf
pool 0.debian.pool.ntp.org iburst
pool 1.debian.pool.ntp.org iburst
pool 2.debian.pool.ntp.org iburst
pool 3.debian.pool.ntp.org iburst

allow $HOME_NET

log tracking measurements statistics
logdir /var/log/chrony
EOL
    systemctl enable chrony
    systemctl restart chrony
    echo "Chrony wurde konfiguriert."
}

# Funktion: Automatische Sicherheitsupdates einrichten
function setup_security_updates() {
    echo "Automatische Sicherheitsupdates einrichten..."
    dpkg-reconfigure --priority=low unattended-upgrades
}

# Funktion: Passwortsicherheit (PAM)
function configure_password_security() {
    echo "Konfiguriere Passwortsicherheit (PAM)..."
    cat <<EOL > /etc/security/pwquality.conf
minlen = 14
dcredit = -1
ucredit = -1
ocredit = -1
lcredit = -1
EOL
    sed -i 's/pam_unix.so/& remember=5/' /etc/pam.d/common-password
    echo "Passwortsicherheit konfiguriert."
}

# Hauptprogramm
ensure_single_sudo_user
harden_sudo
update_system_and_install_tools
configure_postfix
secure_ssh
configure_fail2ban
configure_logwatch
configure_chrony
setup_security_updates
configure_password_security

echo "Systemhärtung abgeschlossen. Bitte starten Sie das System neu, um alle Änderungen zu übernehmen."
